/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package GUI;

import Model.Campaign;
import Model.User;
import java.util.Vector;
import javax.swing.table.DefaultTableModel;
import Controller.AgentController;
import Model.EligibilityForm;
import javax.swing.JOptionPane;
/**
 *
 * @author Suneth
 */
public class AgEligibilityForm extends javax.swing.JFrame {

    /**
     * Creates new form AgEligibilityForm
     */
    private final AgentController controller;
    
    public AgEligibilityForm() {
        initComponents();
        controller = new AgentController();
        campaignTable();
        this.setLocationRelativeTo(null);
        this.setResizable(false);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        btn_backDashboard = new necesario.RSMaterialButtonCircle();
        list_doctorDetails = new javax.swing.JScrollPane();
        table_OngoingCampaign = new javax.swing.JTable();
        list_doctorDetails1 = new javax.swing.JScrollPane();
        table_donorList = new javax.swing.JTable();
        btn_approve = new necesario.MaterialButton();
        btn_reject = new necesario.MaterialButton();
        lbl_name = new javax.swing.JLabel();
        lbl_recent_surgeries = new javax.swing.JLabel();
        chkbx_valid_id = new javax.swing.JCheckBox();
        chkbx_previous_donation = new javax.swing.JCheckBox();
        chkbx_risk_behavior = new javax.swing.JCheckBox();
        lbl_contact = new javax.swing.JLabel();
        lbl_allergies = new javax.swing.JLabel();
        lbl_current_medications = new javax.swing.JLabel();
        lbl_blood_transfusion = new javax.swing.JLabel();
        lbl_recent_travel = new javax.swing.JLabel();
        lbl_chronic_illnesses = new javax.swing.JLabel();
        lbl_tattoos_piercing = new javax.swing.JLabel();
        lbl_current_symptoms = new javax.swing.JLabel();
        lbl_recent_illnesses = new javax.swing.JLabel();
        lbl_pregnancy_status = new javax.swing.JLabel();
        lbl_smoking_alchohol = new javax.swing.JLabel();
        background = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jPanel1.setBackground(new java.awt.Color(255, 255, 255));
        jPanel1.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        btn_backDashboard.setBackground(new java.awt.Color(204, 0, 0));
        btn_backDashboard.setText("<");
        btn_backDashboard.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        btn_backDashboard.setFont(new java.awt.Font("Roboto Medium", 0, 40)); // NOI18N
        btn_backDashboard.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_backDashboardActionPerformed(evt);
            }
        });
        jPanel1.add(btn_backDashboard, new org.netbeans.lib.awtextra.AbsoluteConstraints(320, 40, 60, 60));

        list_doctorDetails.setBackground(new java.awt.Color(204, 204, 204));
        list_doctorDetails.setBorder(null);

        table_OngoingCampaign.setBackground(new java.awt.Color(255, 255, 255));
        table_OngoingCampaign.setForeground(new java.awt.Color(0, 0, 0));
        table_OngoingCampaign.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Id", "Campaign name", "Date", "Time"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        table_OngoingCampaign.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        table_OngoingCampaign.setGridColor(new java.awt.Color(255, 0, 0));
        table_OngoingCampaign.setRowHeight(25);
        table_OngoingCampaign.setSelectionBackground(new java.awt.Color(255, 0, 0));
        table_OngoingCampaign.setSelectionForeground(new java.awt.Color(255, 255, 255));
        table_OngoingCampaign.setShowGrid(false);
        table_OngoingCampaign.getTableHeader().setResizingAllowed(false);
        table_OngoingCampaign.getTableHeader().setReorderingAllowed(false);
        table_OngoingCampaign.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                table_OngoingCampaignMouseClicked(evt);
            }
        });
        list_doctorDetails.setViewportView(table_OngoingCampaign);

        jPanel1.add(list_doctorDetails, new org.netbeans.lib.awtextra.AbsoluteConstraints(70, 190, 430, 120));

        list_doctorDetails1.setBackground(new java.awt.Color(204, 204, 204));
        list_doctorDetails1.setBorder(null);

        table_donorList.setBackground(new java.awt.Color(255, 255, 255));
        table_donorList.setForeground(new java.awt.Color(0, 0, 0));
        table_donorList.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Id", "First Name", "Last Name", "Contact No."
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        table_donorList.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        table_donorList.setGridColor(new java.awt.Color(255, 0, 0));
        table_donorList.setRowHeight(25);
        table_donorList.setSelectionBackground(new java.awt.Color(255, 0, 0));
        table_donorList.setSelectionForeground(new java.awt.Color(255, 255, 255));
        table_donorList.setShowGrid(false);
        table_donorList.getTableHeader().setResizingAllowed(false);
        table_donorList.getTableHeader().setReorderingAllowed(false);
        table_donorList.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                table_donorListMouseClicked(evt);
            }
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                table_donorListMouseEntered(evt);
            }
        });
        list_doctorDetails1.setViewportView(table_donorList);

        jPanel1.add(list_doctorDetails1, new org.netbeans.lib.awtextra.AbsoluteConstraints(70, 420, 430, 240));

        btn_approve.setBackground(new java.awt.Color(0, 153, 0));
        btn_approve.setForeground(new java.awt.Color(255, 255, 255));
        btn_approve.setText("approve");
        btn_approve.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_approveActionPerformed(evt);
            }
        });
        jPanel1.add(btn_approve, new org.netbeans.lib.awtextra.AbsoluteConstraints(690, 610, 130, 40));

        btn_reject.setBackground(new java.awt.Color(255, 0, 51));
        btn_reject.setForeground(new java.awt.Color(255, 255, 255));
        btn_reject.setText("reject");
        btn_reject.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_rejectActionPerformed(evt);
            }
        });
        jPanel1.add(btn_reject, new org.netbeans.lib.awtextra.AbsoluteConstraints(930, 610, 130, 40));

        lbl_name.setBackground(new java.awt.Color(0, 0, 0));
        lbl_name.setForeground(new java.awt.Color(0, 0, 0));
        lbl_name.setText(" ");
        jPanel1.add(lbl_name, new org.netbeans.lib.awtextra.AbsoluteConstraints(640, 213, 250, -1));

        lbl_recent_surgeries.setBackground(new java.awt.Color(0, 0, 0));
        lbl_recent_surgeries.setForeground(new java.awt.Color(0, 0, 0));
        lbl_recent_surgeries.setText(" ");
        jPanel1.add(lbl_recent_surgeries, new org.netbeans.lib.awtextra.AbsoluteConstraints(810, 310, 360, -1));

        chkbx_valid_id.setEnabled(false);
        chkbx_valid_id.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                chkbx_valid_idActionPerformed(evt);
            }
        });
        jPanel1.add(chkbx_valid_id, new org.netbeans.lib.awtextra.AbsoluteConstraints(708, 497, 30, -1));

        chkbx_previous_donation.setForeground(new java.awt.Color(255, 255, 255));
        chkbx_previous_donation.setEnabled(false);
        jPanel1.add(chkbx_previous_donation, new org.netbeans.lib.awtextra.AbsoluteConstraints(710, 286, 30, -1));

        chkbx_risk_behavior.setEnabled(false);
        chkbx_risk_behavior.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                chkbx_risk_behaviorActionPerformed(evt);
            }
        });
        jPanel1.add(chkbx_risk_behavior, new org.netbeans.lib.awtextra.AbsoluteConstraints(730, 405, 30, -1));

        lbl_contact.setBackground(new java.awt.Color(0, 0, 0));
        lbl_contact.setForeground(new java.awt.Color(0, 0, 0));
        lbl_contact.setText(" ");
        jPanel1.add(lbl_contact, new org.netbeans.lib.awtextra.AbsoluteConstraints(698, 235, 270, -1));

        lbl_allergies.setBackground(new java.awt.Color(0, 0, 0));
        lbl_allergies.setForeground(new java.awt.Color(0, 0, 0));
        lbl_allergies.setText(" ");
        jPanel1.add(lbl_allergies, new org.netbeans.lib.awtextra.AbsoluteConstraints(980, 330, 170, -1));

        lbl_current_medications.setBackground(new java.awt.Color(0, 0, 0));
        lbl_current_medications.setForeground(new java.awt.Color(0, 0, 0));
        lbl_current_medications.setText(" ");
        jPanel1.add(lbl_current_medications, new org.netbeans.lib.awtextra.AbsoluteConstraints(710, 330, 170, -1));

        lbl_blood_transfusion.setBackground(new java.awt.Color(0, 0, 0));
        lbl_blood_transfusion.setForeground(new java.awt.Color(0, 0, 0));
        lbl_blood_transfusion.setText(" ");
        jPanel1.add(lbl_blood_transfusion, new org.netbeans.lib.awtextra.AbsoluteConstraints(750, 352, 400, -1));

        lbl_recent_travel.setBackground(new java.awt.Color(0, 0, 0));
        lbl_recent_travel.setForeground(new java.awt.Color(0, 0, 0));
        lbl_recent_travel.setText(" ");
        jPanel1.add(lbl_recent_travel, new org.netbeans.lib.awtextra.AbsoluteConstraints(715, 425, 450, -1));

        lbl_chronic_illnesses.setBackground(new java.awt.Color(0, 0, 0));
        lbl_chronic_illnesses.setForeground(new java.awt.Color(0, 0, 0));
        lbl_chronic_illnesses.setText(" ");
        jPanel1.add(lbl_chronic_illnesses, new org.netbeans.lib.awtextra.AbsoluteConstraints(850, 288, 310, -1));

        lbl_tattoos_piercing.setBackground(new java.awt.Color(0, 0, 0));
        lbl_tattoos_piercing.setForeground(new java.awt.Color(0, 0, 0));
        lbl_tattoos_piercing.setText(" ");
        jPanel1.add(lbl_tattoos_piercing, new org.netbeans.lib.awtextra.AbsoluteConstraints(750, 445, 410, -1));

        lbl_current_symptoms.setBackground(new java.awt.Color(0, 0, 0));
        lbl_current_symptoms.setForeground(new java.awt.Color(0, 0, 0));
        lbl_current_symptoms.setText(" ");
        jPanel1.add(lbl_current_symptoms, new org.netbeans.lib.awtextra.AbsoluteConstraints(850, 498, 310, -1));

        lbl_recent_illnesses.setBackground(new java.awt.Color(0, 0, 0));
        lbl_recent_illnesses.setForeground(new java.awt.Color(0, 0, 0));
        lbl_recent_illnesses.setText(" ");
        jPanel1.add(lbl_recent_illnesses, new org.netbeans.lib.awtextra.AbsoluteConstraints(690, 518, 470, -1));

        lbl_pregnancy_status.setBackground(new java.awt.Color(0, 0, 0));
        lbl_pregnancy_status.setForeground(new java.awt.Color(0, 0, 0));
        lbl_pregnancy_status.setText(" ");
        jPanel1.add(lbl_pregnancy_status, new org.netbeans.lib.awtextra.AbsoluteConstraints(695, 540, 460, -1));

        lbl_smoking_alchohol.setBackground(new java.awt.Color(0, 0, 0));
        lbl_smoking_alchohol.setForeground(new java.awt.Color(0, 0, 0));
        lbl_smoking_alchohol.setText(" ");
        jPanel1.add(lbl_smoking_alchohol, new org.netbeans.lib.awtextra.AbsoluteConstraints(910, 406, 250, -1));

        background.setIcon(new javax.swing.ImageIcon(getClass().getResource("/GUI/imgs/8.png"))); // NOI18N
        jPanel1.add(background, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, -1, -1));

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 1280, Short.MAX_VALUE)
            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(layout.createSequentialGroup()
                    .addGap(0, 0, Short.MAX_VALUE)
                    .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGap(0, 0, Short.MAX_VALUE)))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 720, Short.MAX_VALUE)
            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(layout.createSequentialGroup()
                    .addGap(0, 0, Short.MAX_VALUE)
                    .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGap(0, 0, Short.MAX_VALUE)))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btn_backDashboardActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_backDashboardActionPerformed
        AgDashboard agentDashboard = new AgDashboard();
        agentDashboard.setVisible(true);
        dispose();
    }//GEN-LAST:event_btn_backDashboardActionPerformed

    private void table_OngoingCampaignMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_table_OngoingCampaignMouseClicked

        clearFields();
        int row = table_OngoingCampaign.rowAtPoint(evt.getPoint());
        if (row >= 0) {
            String campaignId = table_OngoingCampaign.getValueAt(row, 0).toString();

            donorTable(campaignId);
        }

    }//GEN-LAST:event_table_OngoingCampaignMouseClicked

    private void table_donorListMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_table_donorListMouseClicked
        clearFields();
        int row = table_donorList.rowAtPoint(evt.getPoint());
        int row2 = table_OngoingCampaign.getSelectedRow();

        if (row >= 0) {

            String user_id = table_donorList.getValueAt(row, 0).toString();
            lbl_name.setText(table_donorList.getValueAt(row, 1).toString() + " " + table_donorList.getValueAt(row, 2).toString());
            lbl_contact.setText(table_donorList.getValueAt(row, 3).toString());
            String campaign_id = table_OngoingCampaign.getValueAt(row2, 0).toString();
            
            
            EligibilityForm form = controller.getEligibilityForm(user_id, campaign_id);

                lbl_chronic_illnesses.setText(form.getChronic_illnesses());
                lbl_recent_surgeries.setText(form.getRecent_surgeries());
                lbl_current_medications.setText(form.getCurrent_medications());
                lbl_allergies.setText(form.getAllergies());
                lbl_blood_transfusion.setText(form.getBlood_transfusion());
                lbl_smoking_alchohol.setText(form.getSmoking_alcohol());
                lbl_recent_travel.setText(form.getRecent_travel());
                lbl_tattoos_piercing.setText(form.getTattoos_piercings());
                lbl_current_symptoms.setText(form.getCurrent_symptoms());
                lbl_recent_illnesses.setText(form.getRecent_illnesses());
                lbl_pregnancy_status.setText(form.getPregnancy_status());
                
                if(form.getPrevious_donation().equals("1")){
                    chkbx_previous_donation.setSelected(true);
                }
                if(form.getRisk_behavior().equals("1")){
                    chkbx_risk_behavior.setSelected(true);
                }
                if(form.getValid_id().equals("1")){
                    chkbx_valid_id.setSelected(true);
                }
            } else{
                JOptionPane.showMessageDialog(null, "Invalid Donor Id", "Error", JOptionPane.ERROR_MESSAGE);
            }
    }//GEN-LAST:event_table_donorListMouseClicked

    private void table_donorListMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_table_donorListMouseEntered
        // TODO add your handling code here:
    }//GEN-LAST:event_table_donorListMouseEntered

    private void btn_approveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_approveActionPerformed
        int selectedRowC = table_OngoingCampaign.getSelectedRow();
        int selectedRowD = table_donorList.getSelectedRow();

        if (selectedRowC != -1 && selectedRowD != -1) {  // Use AND to ensure both rows are selected
            String campaign_id = table_OngoingCampaign.getValueAt(selectedRowC, 0).toString();
            String user_id = table_donorList.getValueAt(selectedRowD, 0).toString();
            String status = "approved";

            int response = JOptionPane.showConfirmDialog(
                null,
                "Are you sure you want to update the donor's eligibility?",
                "Confirm Update",
                JOptionPane.YES_NO_OPTION,
                JOptionPane.QUESTION_MESSAGE
            );

            if (response == JOptionPane.YES_OPTION) {
                if(!controller.updateEligibility(user_id, campaign_id, status)){
                    JOptionPane.showMessageDialog(null, "Invalid Donor Id.", "Error", JOptionPane.ERROR_MESSAGE);
                } else {
                    JOptionPane.showMessageDialog(null, "Eligibility Updated Successfully!", "Success", JOptionPane.INFORMATION_MESSAGE);
                    donorTable(campaign_id); // Refresh the donor table
                    clearFields(); // Clear the input fields after successful update
                }
            } else {
                JOptionPane.showMessageDialog(null, "Eligibility update canceled.", "Canceled", JOptionPane.INFORMATION_MESSAGE);
            }
        } else {
            JOptionPane.showMessageDialog(null, "Please select a campaign and a donor.", "Warning", JOptionPane.WARNING_MESSAGE);
        }
    }//GEN-LAST:event_btn_approveActionPerformed

    private void btn_rejectActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_rejectActionPerformed
        int selectedRowC = table_OngoingCampaign.getSelectedRow();
        int selectedRowD = table_donorList.getSelectedRow();

        if (selectedRowC != -1 && selectedRowD != -1) {  // Use AND to ensure both rows are selected
            String campaign_id = table_OngoingCampaign.getValueAt(selectedRowC, 0).toString();
            String user_id = table_donorList.getValueAt(selectedRowD, 0).toString();
            String status = "rejected";

            int response = JOptionPane.showConfirmDialog(
                null,
                "Are you sure you want to update the donor's eligibility?",
                "Confirm Update",
                JOptionPane.YES_NO_OPTION,
                JOptionPane.QUESTION_MESSAGE
            );

            if (response == JOptionPane.YES_OPTION) {
                if(!controller.updateEligibility(user_id, campaign_id, status)){
                    JOptionPane.showMessageDialog(null, "Invalid Donor Id.", "Error", JOptionPane.ERROR_MESSAGE);
                } else {
                    JOptionPane.showMessageDialog(null, "Eligibility Updated Successfully!", "Success", JOptionPane.INFORMATION_MESSAGE);
                    donorTable(campaign_id); // Refresh the donor table
                    clearFields(); // Clear the input fields after successful update
                }
            } else {
                JOptionPane.showMessageDialog(null, "Eligibility update canceled.", "Canceled", JOptionPane.INFORMATION_MESSAGE);
            }
        } else {
            JOptionPane.showMessageDialog(null, "Please select a campaign and a donor.", "Warning", JOptionPane.WARNING_MESSAGE);
        }
    }//GEN-LAST:event_btn_rejectActionPerformed

    private void chkbx_valid_idActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_chkbx_valid_idActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_chkbx_valid_idActionPerformed

    private void chkbx_risk_behaviorActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_chkbx_risk_behaviorActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_chkbx_risk_behaviorActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(AgEligibilityForm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(AgEligibilityForm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(AgEligibilityForm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(AgEligibilityForm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new AgEligibilityForm().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel background;
    private necesario.MaterialButton btn_approve;
    private necesario.RSMaterialButtonCircle btn_backDashboard;
    private necesario.MaterialButton btn_reject;
    private javax.swing.JCheckBox chkbx_previous_donation;
    private javax.swing.JCheckBox chkbx_risk_behavior;
    private javax.swing.JCheckBox chkbx_valid_id;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JLabel lbl_allergies;
    private javax.swing.JLabel lbl_blood_transfusion;
    private javax.swing.JLabel lbl_chronic_illnesses;
    private javax.swing.JLabel lbl_contact;
    private javax.swing.JLabel lbl_current_medications;
    private javax.swing.JLabel lbl_current_symptoms;
    private javax.swing.JLabel lbl_name;
    private javax.swing.JLabel lbl_pregnancy_status;
    private javax.swing.JLabel lbl_recent_illnesses;
    private javax.swing.JLabel lbl_recent_surgeries;
    private javax.swing.JLabel lbl_recent_travel;
    private javax.swing.JLabel lbl_smoking_alchohol;
    private javax.swing.JLabel lbl_tattoos_piercing;
    private javax.swing.JScrollPane list_doctorDetails;
    private javax.swing.JScrollPane list_doctorDetails1;
    private javax.swing.JTable table_OngoingCampaign;
    private javax.swing.JTable table_donorList;
    // End of variables declaration//GEN-END:variables

    
    public void clearFields(){
        lbl_chronic_illnesses.setText("");
        lbl_recent_surgeries.setText("");
        lbl_current_medications.setText("");
        lbl_allergies.setText("");
        lbl_blood_transfusion.setText("");
        lbl_smoking_alchohol.setText("");
        lbl_recent_travel.setText("");
        lbl_tattoos_piercing.setText("");
        lbl_current_symptoms.setText("");
        lbl_recent_illnesses.setText("");
        lbl_pregnancy_status.setText("");
        lbl_name.setText("");
        lbl_contact.setText("");
        chkbx_previous_donation.setSelected(false);
        chkbx_risk_behavior.setSelected(false);
        chkbx_valid_id.setSelected(false);
    }
    public void campaignTable(){
        DefaultTableModel model = (DefaultTableModel) table_OngoingCampaign.getModel();
        
        java.util.List<Campaign> campaigns = controller.getCampaign();
        model.setRowCount(0);
    
        for (Campaign campaign : campaigns) {
            Vector<Object> row = new Vector<>();
            row.add(campaign.getCampaign_id());
            row.add(campaign.getCampaign_name());
            row.add(campaign.getDate());
            row.add(campaign.getTime());
            model.addRow(row);
        }
    }
        public void donorTable(String campaignId){
            DefaultTableModel model = (DefaultTableModel) table_donorList.getModel();
        
            java.util.List<User> donors = controller.getDonor(campaignId);
            model.setRowCount(0);

            for (User donor : donors) {
                Vector<Object> drow = new Vector<>();
                drow.add(donor.getUser_id());
                drow.add(donor.getFname());
                drow.add(donor.getLname());
                drow.add(donor.getContact());
                model.addRow(drow);
            }            
        }
}
