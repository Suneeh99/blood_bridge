/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package GUI;

import Controller.DoctorController;
import Model.Campaign;
import Model.User;
import Model.MedicalRecord;

import javax.swing.*;
import java.awt.*;
import java.util.Vector;
import javax.swing.table.DefaultTableModel;

public class DDashboard extends javax.swing.JFrame {

    /**
     * Creates new form dashboard
     */
    private final DoctorController controller;
    public DDashboard() {
        initComponents();
        controller = new DoctorController();
        this.setLocationRelativeTo(null);
        this.setResizable(false);
        campaignTable();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        btn_search = new necesario.MaterialButton();
        lbl_donorId = new javax.swing.JLabel();
        lbl_fullname = new javax.swing.JLabel();
        txt_searchDonorId = new app.bolivia.swing.JCTextField();
        txt_allergies = new app.bolivia.swing.JCTextField();
        txt_illnesses = new app.bolivia.swing.JCTextField();
        txt_surgeries = new app.bolivia.swing.JCTextField();
        btn_update = new necesario.MaterialButton();
        btn_save = new necesario.MaterialButton();
        btn_approve = new necesario.MaterialButton();
        btn_reject = new necesario.MaterialButton();
        list_doctorDetails = new javax.swing.JScrollPane();
        table_OngoingCampaign = new javax.swing.JTable();
        list_doctorDetails1 = new javax.swing.JScrollPane();
        table_donorList = new javax.swing.JTable();
        lbl_logout = new javax.swing.JLabel();
        background = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        getContentPane().setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jPanel1.setBackground(new java.awt.Color(255, 255, 255));
        jPanel1.setForeground(new java.awt.Color(255, 255, 255));
        jPanel1.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        btn_search.setBackground(new java.awt.Color(217, 217, 217));
        btn_search.setForeground(new java.awt.Color(153, 153, 153));
        btn_search.setText("Search");
        btn_search.setFont(new java.awt.Font("Roboto Medium", 0, 12)); // NOI18N
        btn_search.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_searchActionPerformed(evt);
            }
        });
        jPanel1.add(btn_search, new org.netbeans.lib.awtextra.AbsoluteConstraints(660, 354, 60, 30));

        lbl_donorId.setBackground(new java.awt.Color(217, 217, 217));
        lbl_donorId.setFont(new java.awt.Font("Segoe UI", 0, 15)); // NOI18N
        lbl_donorId.setForeground(new java.awt.Color(0, 0, 0));
        jPanel1.add(lbl_donorId, new org.netbeans.lib.awtextra.AbsoluteConstraints(930, 270, 80, 30));

        lbl_fullname.setBackground(new java.awt.Color(217, 217, 217));
        lbl_fullname.setFont(new java.awt.Font("Segoe UI", 0, 15)); // NOI18N
        lbl_fullname.setForeground(new java.awt.Color(0, 0, 0));
        jPanel1.add(lbl_fullname, new org.netbeans.lib.awtextra.AbsoluteConstraints(930, 330, 180, 30));

        txt_searchDonorId.setEditable(false);
        txt_searchDonorId.setBackground(new java.awt.Color(217, 217, 217));
        txt_searchDonorId.setBorder(null);
        txt_searchDonorId.setForeground(new java.awt.Color(0, 0, 0));
        txt_searchDonorId.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N
        txt_searchDonorId.setSelectionColor(new java.awt.Color(255, 0, 51));
        txt_searchDonorId.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txt_searchDonorIdActionPerformed(evt);
            }
        });
        jPanel1.add(txt_searchDonorId, new org.netbeans.lib.awtextra.AbsoluteConstraints(580, 353, 80, -1));

        txt_allergies.setEditable(false);
        txt_allergies.setBackground(new java.awt.Color(217, 217, 217));
        txt_allergies.setBorder(null);
        txt_allergies.setForeground(new java.awt.Color(0, 0, 0));
        txt_allergies.setFont(new java.awt.Font("Segoe UI", 0, 15)); // NOI18N
        txt_allergies.setSelectionColor(new java.awt.Color(255, 0, 51));
        txt_allergies.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txt_allergiesActionPerformed(evt);
            }
        });
        jPanel1.add(txt_allergies, new org.netbeans.lib.awtextra.AbsoluteConstraints(920, 515, 210, 30));

        txt_illnesses.setEditable(false);
        txt_illnesses.setBackground(new java.awt.Color(217, 217, 217));
        txt_illnesses.setBorder(null);
        txt_illnesses.setForeground(new java.awt.Color(0, 0, 0));
        txt_illnesses.setFont(new java.awt.Font("Segoe UI", 0, 15)); // NOI18N
        txt_illnesses.setSelectionColor(new java.awt.Color(255, 0, 51));
        jPanel1.add(txt_illnesses, new org.netbeans.lib.awtextra.AbsoluteConstraints(920, 392, 210, -1));

        txt_surgeries.setEditable(false);
        txt_surgeries.setBackground(new java.awt.Color(217, 217, 217));
        txt_surgeries.setBorder(null);
        txt_surgeries.setForeground(new java.awt.Color(0, 0, 0));
        txt_surgeries.setFont(new java.awt.Font("Segoe UI", 0, 15)); // NOI18N
        txt_surgeries.setSelectionColor(new java.awt.Color(255, 0, 51));
        txt_surgeries.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txt_surgeriesActionPerformed(evt);
            }
        });
        jPanel1.add(txt_surgeries, new org.netbeans.lib.awtextra.AbsoluteConstraints(930, 454, 200, 30));

        btn_update.setBackground(new java.awt.Color(0, 51, 255));
        btn_update.setForeground(new java.awt.Color(255, 255, 255));
        btn_update.setText("Update");
        btn_update.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_updateActionPerformed(evt);
            }
        });
        jPanel1.add(btn_update, new org.netbeans.lib.awtextra.AbsoluteConstraints(870, 580, 110, 40));

        btn_save.setBackground(new java.awt.Color(0, 153, 0));
        btn_save.setForeground(new java.awt.Color(255, 255, 255));
        btn_save.setText("save");
        btn_save.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_saveActionPerformed(evt);
            }
        });
        jPanel1.add(btn_save, new org.netbeans.lib.awtextra.AbsoluteConstraints(1010, 580, 110, 40));

        btn_approve.setBackground(new java.awt.Color(0, 153, 0));
        btn_approve.setForeground(new java.awt.Color(255, 255, 255));
        btn_approve.setText("approve");
        btn_approve.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_approveActionPerformed(evt);
            }
        });
        jPanel1.add(btn_approve, new org.netbeans.lib.awtextra.AbsoluteConstraints(575, 420, 130, 40));

        btn_reject.setBackground(new java.awt.Color(255, 0, 51));
        btn_reject.setForeground(new java.awt.Color(255, 255, 255));
        btn_reject.setText("reject");
        btn_reject.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_rejectActionPerformed(evt);
            }
        });
        jPanel1.add(btn_reject, new org.netbeans.lib.awtextra.AbsoluteConstraints(575, 480, 130, 40));

        list_doctorDetails.setBackground(new java.awt.Color(204, 204, 204));
        list_doctorDetails.setBorder(null);

        table_OngoingCampaign.setBackground(new java.awt.Color(255, 255, 255));
        table_OngoingCampaign.setForeground(new java.awt.Color(0, 0, 0));
        table_OngoingCampaign.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Id", "Campaign name", "Date", "Time"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        table_OngoingCampaign.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        table_OngoingCampaign.setGridColor(new java.awt.Color(255, 0, 0));
        table_OngoingCampaign.setRowHeight(25);
        table_OngoingCampaign.setSelectionBackground(new java.awt.Color(255, 0, 0));
        table_OngoingCampaign.setSelectionForeground(new java.awt.Color(255, 255, 255));
        table_OngoingCampaign.setShowGrid(false);
        table_OngoingCampaign.getTableHeader().setResizingAllowed(false);
        table_OngoingCampaign.getTableHeader().setReorderingAllowed(false);
        table_OngoingCampaign.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                table_OngoingCampaignMouseClicked(evt);
            }
        });
        list_doctorDetails.setViewportView(table_OngoingCampaign);

        jPanel1.add(list_doctorDetails, new org.netbeans.lib.awtextra.AbsoluteConstraints(70, 200, 430, 120));

        list_doctorDetails1.setBackground(new java.awt.Color(204, 204, 204));
        list_doctorDetails1.setBorder(null);

        table_donorList.setBackground(new java.awt.Color(255, 255, 255));
        table_donorList.setForeground(new java.awt.Color(0, 0, 0));
        table_donorList.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Id", "First Name", "Last Name", "Contact No."
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        table_donorList.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        table_donorList.setGridColor(new java.awt.Color(255, 0, 0));
        table_donorList.setRowHeight(25);
        table_donorList.setSelectionBackground(new java.awt.Color(255, 0, 0));
        table_donorList.setSelectionForeground(new java.awt.Color(255, 255, 255));
        table_donorList.setShowGrid(false);
        table_donorList.getTableHeader().setResizingAllowed(false);
        table_donorList.getTableHeader().setReorderingAllowed(false);
        table_donorList.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                table_donorListMouseClicked(evt);
            }
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                table_donorListMouseEntered(evt);
            }
        });
        list_doctorDetails1.setViewportView(table_donorList);

        jPanel1.add(list_doctorDetails1, new org.netbeans.lib.awtextra.AbsoluteConstraints(70, 420, 430, 240));

        lbl_logout.setText("           ");
        lbl_logout.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                lbl_logoutMousePressed(evt);
            }
        });
        jPanel1.add(lbl_logout, new org.netbeans.lib.awtextra.AbsoluteConstraints(1220, 10, -1, 40));

        background.setIcon(new javax.swing.ImageIcon(getClass().getResource("/GUI/imgs/6.png"))); // NOI18N
        background.setToolTipText("");
        jPanel1.add(background, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, 1280, 720));

        getContentPane().add(jPanel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, 1280, 720));

        setSize(new java.awt.Dimension(1296, 758));
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void btn_searchActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_searchActionPerformed
        MedicalRecord medical = controller.getMedicalRecords(txt_searchDonorId.getText());

            if(medical != null){
                txt_allergies.setText(medical.getAllergies());
                txt_surgeries.setText(medical.getSurgeries());
                txt_illnesses.setText(medical.getIllnesses());
            } else{
                JOptionPane.showMessageDialog(null, "Invalid Donor Id", "Error", JOptionPane.ERROR_MESSAGE);
            }
    }//GEN-LAST:event_btn_searchActionPerformed

    private void btn_updateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_updateActionPerformed
        if(!lbl_donorId.getText().equals("")){
            txt_allergies.setEditable(true);
            txt_surgeries.setEditable(true);
            txt_illnesses.setEditable(true);
        }
    }//GEN-LAST:event_btn_updateActionPerformed

    private void btn_saveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_saveActionPerformed
        
        MedicalRecord medical = new MedicalRecord(lbl_donorId.getText(), txt_allergies.getText(), txt_surgeries.getText(), txt_illnesses.getText());
        
        if(txt_searchDonorId.getText().isEmpty()){
            JOptionPane.showMessageDialog(null, "Donor Id is required.", "Error", JOptionPane.ERROR_MESSAGE);
        } else{
            int response = JOptionPane.showConfirmDialog(
                    null, 
                    "Are you sure you want to update the donor's medical record?", 
                    "Confirm Update", 
                    JOptionPane.YES_NO_OPTION, 
                    JOptionPane.QUESTION_MESSAGE
            );

            if (response == JOptionPane.YES_OPTION) {
                if (controller.updateRecord(medical)) {
                    JOptionPane.showMessageDialog(null, "Medical record Updated Successfully!", "Success", JOptionPane.INFORMATION_MESSAGE);
                } else {
                    JOptionPane.showMessageDialog(null, "Invalid Donor Id.", "Error", JOptionPane.ERROR_MESSAGE);
                }
            } else {
                JOptionPane.showMessageDialog(null, "Medical record update canceled.", "Canceled", JOptionPane.INFORMATION_MESSAGE);
            }
        }
    }//GEN-LAST:event_btn_saveActionPerformed

    private void btn_approveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_approveActionPerformed
        int selectedRow = table_OngoingCampaign.getSelectedRow(); 
        if (selectedRow != -1 && !txt_searchDonorId.getText().isEmpty()) { 
            String campaign_id = table_OngoingCampaign.getValueAt(selectedRow, 0).toString();
            String user_id = txt_searchDonorId.getText();
            String status = "approved";

            
                int response = JOptionPane.showConfirmDialog(
                        null, 
                        "Are you sure you want to update the donor's eligibility?", 
                        "Confirm Update", 
                        JOptionPane.YES_NO_OPTION, 
                        JOptionPane.QUESTION_MESSAGE
                );

                if (response == JOptionPane.YES_OPTION) {
                    if(!controller.updateEligibility(user_id, campaign_id, status)) {
                        JOptionPane.showMessageDialog(null, "Invalid Donor Id.", "Error", JOptionPane.ERROR_MESSAGE);
                    } else {
                        JOptionPane.showMessageDialog(null, "Eligibility Updated Successfully!", "Success", JOptionPane.INFORMATION_MESSAGE);

                        donorTable(campaign_id); 
                        txt_allergies.setText("");
                        txt_illnesses.setText("");
                        txt_surgeries.setText("");
                        txt_searchDonorId.setText("");
                        lbl_donorId.setText("");
                        lbl_fullname.setText("");
                    }
                } else {
                    JOptionPane.showMessageDialog(null, "Eligibility update canceled.", "Canceled", JOptionPane.INFORMATION_MESSAGE);
                }
            }
        
    }//GEN-LAST:event_btn_approveActionPerformed

    private void btn_rejectActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_rejectActionPerformed
        int selectedRow = table_OngoingCampaign.getSelectedRow(); 
        if (selectedRow != -1 && !txt_searchDonorId.getText().isEmpty()) { 
            String campaign_id = table_OngoingCampaign.getValueAt(selectedRow, 0).toString();
            String user_id = txt_searchDonorId.getText();
            String status = "rejected";

            
                int response = JOptionPane.showConfirmDialog(
                        null, 
                        "Are you sure you want to update the donor's eligibility?", 
                        "Confirm Update", 
                        JOptionPane.YES_NO_OPTION, 
                        JOptionPane.QUESTION_MESSAGE
                );

                if (response == JOptionPane.YES_OPTION) {
                    if(controller.updateEligibility(user_id, campaign_id, status)) {
                        JOptionPane.showMessageDialog(null, "Eligibility Updated Successfully!", "Success", JOptionPane.INFORMATION_MESSAGE);
                        donorTable(campaign_id); 
                        txt_allergies.setText("");
                        txt_illnesses.setText("");
                        txt_surgeries.setText("");
                        txt_searchDonorId.setText("");
                        lbl_donorId.setText("");
                        lbl_fullname.setText("");
                    }
                } else {
                    JOptionPane.showMessageDialog(null, "Eligibility update canceled.", "Canceled", JOptionPane.INFORMATION_MESSAGE);
                }
            }
    }//GEN-LAST:event_btn_rejectActionPerformed

    private void table_OngoingCampaignMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_table_OngoingCampaignMouseClicked
              
        int row = table_OngoingCampaign.rowAtPoint(evt.getPoint());
        if (row >= 0) {
            txt_searchDonorId.setEditable(true);
            String campaignId = table_OngoingCampaign.getValueAt(row, 0).toString();
            
            donorTable(campaignId);
        }
        
        txt_allergies.setText("");
        txt_illnesses.setText("");
        txt_surgeries.setText("");
        txt_searchDonorId.setText("");
        lbl_donorId.setText("");
        lbl_fullname.setText("");
    }//GEN-LAST:event_table_OngoingCampaignMouseClicked

    private void table_donorListMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_table_donorListMouseClicked
        int row = table_donorList.rowAtPoint(evt.getPoint());
        if (row >= 0) {
            
            txt_searchDonorId.setText(table_donorList.getValueAt(row, 0).toString());
            lbl_donorId.setText(table_donorList.getValueAt(row, 0).toString());
            lbl_fullname.setText(table_donorList.getValueAt(row, 1).toString() + " " + table_donorList.getValueAt(row, 2).toString());
            

            MedicalRecord medical = controller.getMedicalRecords(txt_searchDonorId.getText());
            if(medical != null){
                txt_allergies.setText(medical.getAllergies());
                txt_surgeries.setText(medical.getSurgeries());
                txt_illnesses.setText(medical.getIllnesses());
            } 
                        
        }
    }//GEN-LAST:event_table_donorListMouseClicked

    private void txt_allergiesActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txt_allergiesActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txt_allergiesActionPerformed

    private void txt_surgeriesActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txt_surgeriesActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txt_surgeriesActionPerformed

    private void table_donorListMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_table_donorListMouseEntered
        // TODO add your handling code here:
    }//GEN-LAST:event_table_donorListMouseEntered

    private void txt_searchDonorIdActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txt_searchDonorIdActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txt_searchDonorIdActionPerformed

    private void lbl_logoutMousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_lbl_logoutMousePressed

        // Show confirmation dialog
        int response = JOptionPane.showConfirmDialog(null,
            "Are you sure you want to logout?",
            "Confirm Logout",
            JOptionPane.YES_NO_OPTION,
            JOptionPane.QUESTION_MESSAGE);

        if (response == JOptionPane.YES_OPTION) {
            Login login = new Login();
            login.setVisible(true);
            dispose();
        }

    }//GEN-LAST:event_lbl_logoutMousePressed
 
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(DDashboard.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(DDashboard.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(DDashboard.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(DDashboard.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new DDashboard().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel background;
    private necesario.MaterialButton btn_approve;
    private necesario.MaterialButton btn_reject;
    private necesario.MaterialButton btn_save;
    private necesario.MaterialButton btn_search;
    private necesario.MaterialButton btn_update;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JLabel lbl_donorId;
    private javax.swing.JLabel lbl_fullname;
    private javax.swing.JLabel lbl_logout;
    private javax.swing.JScrollPane list_doctorDetails;
    private javax.swing.JScrollPane list_doctorDetails1;
    private javax.swing.JTable table_OngoingCampaign;
    private javax.swing.JTable table_donorList;
    private app.bolivia.swing.JCTextField txt_allergies;
    private app.bolivia.swing.JCTextField txt_illnesses;
    private app.bolivia.swing.JCTextField txt_searchDonorId;
    private app.bolivia.swing.JCTextField txt_surgeries;
    // End of variables declaration//GEN-END:variables


        public void campaignTable(){
        DefaultTableModel model = (DefaultTableModel) table_OngoingCampaign.getModel();
        
        java.util.List<Campaign> campaigns = controller.getCampaign();
        model.setRowCount(0);
    
        for (Campaign campaign : campaigns) {
            Vector<Object> row = new Vector<>();
            row.add(campaign.getCampaign_id());
            row.add(campaign.getCampaign_name());
            row.add(campaign.getDate());
            row.add(campaign.getTime());
            model.addRow(row);
        }
    }
        public void donorTable(String campaignId){
            DefaultTableModel model = (DefaultTableModel) table_donorList.getModel();
        
            java.util.List<User> donors = controller.getDonor(campaignId);
            model.setRowCount(0);

            for (User donor : donors) {
                Vector<Object> drow = new Vector<>();
                drow.add(donor.getUser_id());
                drow.add(donor.getFname());
                drow.add(donor.getLname());
                drow.add(donor.getContact());
                model.addRow(drow);
            }            
        }
    
}
